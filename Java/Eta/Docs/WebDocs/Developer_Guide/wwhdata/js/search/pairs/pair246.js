function FileData_Pairs(x)
{
x.t("complex","type");
x.t("fieldentry.decode","again");
x.t("m.parentnode.insertbefore","window");
x.t("method","description");
x.t("method","primitivetype");
x.t("method","blank");
x.t("method","pre-encoded");
x.t("method","expects");
x.t("method","called");
x.t("method","call");
x.t("datatypes.unknown","user");
x.t("datatypes.unknown","indicating");
x.t("indicated","definition");
x.t("parameter","false");
x.t("available","clear");
x.t("defines","positive");
x.t("defines","negative");
x.t("decodeiterator","used");
x.t("clear","clears");
x.t("clear","chapter");
x.t(".l=1","new");
x.t("create","ua-55718642-4");
x.t("set-defined","types");
x.t("set-defined","data");
x.t("set-defined","entries");
x.t("table","fieldentry");
x.t("description","fieldid");
x.t("refer","user-defined");
x.t("refer","thomson");
x.t("maximum-encoded","length");
x.t("action","values");
x.t("odeddata","sets");
x.t("(w/primitivetype)","encodes");
x.t("fieldlist.decode","populates");
x.t("container","type");
x.t("container","types");
x.t("refers","encoded");
x.t("refers","specific");
x.t("user","defines");
x.t("user","determine");
x.t("primitivetype","entry");
x.t("field","entry");
x.t("field","dictionary");
x.t("field","approximate");
x.t("blank","entry");
x.t("blank","fieldentry");
x.t("fieldlist.enocdeinit","properly");
x.t("until","entries");
x.t("roll","back");
x.t("type","action");
x.t("type","container");
x.t("type","field");
x.t("type","definition");
x.t("type","indicate");
x.t("type","fieldid");
x.t("type","encoded");
x.t("type","array");
x.t("type","replaces");
x.t("type","e.g");
x.t("type","specific");
x.t("type","information");
x.t("type","contained");
x.t("type","using");
x.t("payload","length");
x.t("populate","fieldentry.fieldid");
x.t("external","field");
x.t("copied","encoding");
x.t("a=s.createelement","(o)");
x.t("primitive","type");
x.t("primitive","types");
x.t("primitive","data");
x.t("needed","calling");
x.t("needed","encoding");
x.t("back","encoding");
x.t("new","date");
x.t("contents","decoding");
x.t("contents","encoding");
x.t("element","list");
x.t("document","script");
x.t("includes","primitive");
x.t("encodecomplete","completes");
x.t("pageview","transport");
x.t("indicates","data");
x.t("encodeiterator","used");
x.t("list","field");
x.t("again","begin");
x.t("api","java");
x.t("pre-encoded","entry");
x.t("pre-encoded","enc");
x.t("pre-encoded","data");
x.t("entry","fails");
x.t("entry","fieldlist");
x.t("entry","encoded");
x.t("entry","call");
x.t("entry","encoding");
x.t("entry\u2019s","encoded");
x.t("fails","boolean");
x.t("false","roll");
x.t("oded","data");
x.t("reserve","space");
x.t("true","finish");
x.t("stored","displayed");
x.t("name","type");
x.t("range","-32,768");
x.t("definition","decoding");
x.t("definition","enc");
x.t("previously","stored");
x.t("dictionary","set-defined");
x.t("dictionary","determining");
x.t("dictionary","rdmfielddictionary");
x.t("enumerated","value");
x.t("populated","decoding");
x.t("populated","encode");
x.t("approximate","encoded");
x.t("11.3.1.3","fieldentry");
x.t("methods","complex");
x.t("methods","method");
x.t("methods","indicates");
x.t("methods","function");
x.t("methods","fieldentry");
x.t("window","document");
x.t("updating","information");
x.t("fieldlist.encodeinit","properly");
x.t("fieldlist.encodeinit","fieldentry.encodeinit");
x.t("fieldlist.encodeinit","call");
x.t("boolean","success");
x.t("fieldlist","until");
x.t("fieldlist","11.3.1.3");
x.t("fieldid","refers");
x.t("fieldid","sets");
x.t("fieldid","int");
x.t("fieldid","-value");
x.t("fieldid","value");
x.t("fieldid","values");
x.t("fieldid","fieldentry");
x.t("fieldid","allowable");
x.t("indicate","specific");
x.t("indicate","dictionaryid");
x.t("indicate","modify");
x.t("determine","type");
x.t("standard","fieldid");
x.t("reuters-defined","values");
x.t("encoded","contents");
x.t("encoded","encodeblank");
x.t("encoded","decoding");
x.t("encoded","encodeinit");
x.t("encoded","length");
x.t("encoded","fieldentry");
x.t("encoded","encode");
x.t("encoded","content");
x.t("allows","maximum");
x.t("sets","gets");
x.t("int","datatype");
x.t("array","method");
x.t("(o)","m=s.getelementsbytagname");
x.t("(o)","[0]");
x.t("datatype","datatypes.unknown");
x.t("datatype","enumerated");
x.t("datatype","indicate");
x.t("datatype","sets");
x.t("uint","method");
x.t("auto","send");
x.t("functions","refers");
x.t("begin","decoding");
x.t("reuters","defines");
x.t("encodeblank","encodes");
x.t("-value","data");
x.t("two-byte","value");
x.t("fieldentry.encodecomplete","encodecomplete");
x.t("next","entry");
x.t("space","needed");
x.t("32,767","thomson");
x.t("decoding","set-defined");
x.t("decoding","standard");
x.t("decoding","datatype");
x.t("decoding","functions");
x.t("decoding","next");
x.t("decoding","fieldentry");
x.t("function","[r]");
x.t("function","googleanalyticsobject");
x.t("length","field");
x.t("length","known");
x.t("length","information");
x.t("length","typical");
x.t("length","containing");
x.t("encodeinit","encodes");
x.t("maximum","content");
x.t("fieldentry.enocdeinit","call");
x.t("indicating","user");
x.t("determining","type");
x.t("clears","object");
x.t("user-defined","values");
x.t("hint","value");
x.t("particular","fieldentry");
x.t("decodes","fieldentry");
x.t("chapter","data");
x.t("detailed","view");
x.t("transport","api");
x.t("types","updating");
x.t("types","11.3.1");
x.t("types","described");
x.t("section","11.2");
x.t("section","11.6");
x.t("rdmfielddictionary","negative");
x.t("changes","type");
x.t("properly","populate");
x.t("populates","type");
x.t("populates","encodeddata");
x.t("enc","odeddata");
x.t("enc","oded");
x.t("calling","fieldentry.decode");
x.t("calling","method");
x.t("expected","maximum-encoded");
x.t("replaces","previously");
x.t("thomson","reuters-defined");
x.t("thomson","reuters");
x.t("expects","encodeiterator");
x.t("completes","encoding");
x.t("reused","without");
x.t("encodes","blank");
x.t("encodes","fieldentry");
x.t("fieldentry.fieldid","fieldentry.datatype");
x.t("known","pass");
x.t("java","edition");
x.t("e.g","uint");
x.t("e.g","encode");
x.t("displayed","data");
x.t("house","datatypes");
x.t("encodeddata","pre-encoded");
x.t("encodeddata","entry\u2019s");
x.t("encodeddata","buffer");
x.t("fieldentry.datatype","datatypes.unknown");
x.t("fieldentry.datatype","reserve");
x.t("fieldentry.datatype","populates");
x.t("fieldentry.datatype","encodeddata");
x.t("fieldentry.datatype","call");
x.t("value","type");
x.t("value","fieldid");
x.t("value","indicate");
x.t("value","allows");
x.t("value","associated");
x.t("send","pageview");
x.t("11.2","set-defined");
x.t("signed","two-byte");
x.t("specific","name");
x.t("specific","decode");
x.t("specific","datatypes");
x.t("11.3.1","fieldlist");
x.t("(arguments)","[r]");
x.t("view","11.3");
x.t("11.3","container");
x.t("m=s.getelementsbytagname","(o)");
x.t("[0]","a.async=1");
x.t("decode","method");
x.t("decode","decodes");
x.t("script","//www.google-analytics.com/analytics.js");
x.t("maximum-length","hint");
x.t("tip","decoding");
x.t(".push","(arguments)");
x.t("ua-55718642-4","auto");
x.t("11.6","container");
x.t("information","indicated");
x.t("information","table");
x.t("information","defined");
x.t("information","fieldentry");
x.t("information","associated");
x.t("information","encode");
x.t("data","method");
x.t("data","type");
x.t("data","copied");
x.t("data","pre-encoded");
x.t("data","calling");
x.t("data","fieldentry.datatype");
x.t("data","package");
x.t("data","used");
x.t("data","associated");
x.t("typical","e.g");
x.t("fieldentry.encodeinit","entry");
x.t("defined","external");
x.t("values","user");
x.t("values","fieldid");
x.t("values","typically");
x.t("values","positive");
x.t("values","associated");
x.t("reuse","tip");
x.t("described","section");
x.t("finish","entry");
x.t("called","needed");
x.t("date","a=s.createelement");
x.t("//www.google-analytics.com/analytics.js","create");
x.t("typically","refer");
x.t("positive","fieldid");
x.t("positive","values");
x.t("-32,768","32,767");
x.t("dictionaryid","changes");
x.t("edition","fieldentry");
x.t("call","method");
x.t("call","fieldentry.encodecomplete");
x.t("call","fieldentry.enocdeinit");
x.t("call","encoding");
x.t("package","detailed");
x.t(".q=i","[r]");
x.t("contained","information");
x.t("used","fieldlist.decode");
x.t("used","fieldlist.enocdeinit");
x.t("used","fieldlist.encodeinit");
x.t("used","datatype");
x.t("fieldentry","complex");
x.t("fieldentry","method");
x.t("fieldentry","payload");
x.t("fieldentry","primitive");
x.t("fieldentry","contents");
x.t("fieldentry","pre-encoded");
x.t("fieldentry","populated");
x.t("fieldentry","methods");
x.t("fieldentry","reused");
x.t("fieldentry","house");
x.t("fieldentry","decode");
x.t("fieldentry","expecting");
x.t("fieldentry","contains");
x.t("[r]",".l=1");
x.t("[r]","function");
x.t("[r]",".push");
x.t("[r]",".q=i");
x.t("[r]","[r]");
x.t("containing","encoded");
x.t("using","clear");
x.t("using","buffer");
x.t("a.async=1","a.src=g");
x.t("allowable","range");
x.t("pass","value");
x.t("pass","maximum-length");
x.t("succeeds","boolean");
x.t("expecting","decodeiterator");
x.t("googleanalyticsobject","[r]");
x.t("associated","field");
x.t("associated","type");
x.t("associated","fieldid");
x.t("associated","expected");
x.t("modify","information");
x.t("without","using");
x.t("position","length");
x.t("success","parameter");
x.t("success","true");
x.t("buffer","call");
x.t("buffer","position");
x.t("encode","(w/primitivetype)");
x.t("encode","element");
x.t("encode","methods");
x.t("encode","encodes");
x.t("entries","available");
x.t("entries","fieldentry.datatype");
x.t("a.src=g","m.parentnode.insertbefore");
x.t("datatypes","includes");
x.t("datatypes","information");
x.t("datatypes","fieldentry");
x.t("contains","container");
x.t("contains","primitive");
x.t("gets","encodeddata");
x.t("gets","signed");
x.t("gets","datatypes");
x.t("negative","fieldid");
x.t("negative","values");
x.t("encoding","entry");
x.t("encoding","populated");
x.t("encoding","methods");
x.t("encoding","datatype");
x.t("encoding","particular");
x.t("encoding","fieldentry");
x.t("encoding","pass");
x.t("encoding","succeeds");
x.t("encoding","encoding");
x.t("content","length");
x.t("content","fieldentry");
x.t("object","reuse");
}
