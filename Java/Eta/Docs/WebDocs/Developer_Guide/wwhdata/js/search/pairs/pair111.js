function FileData_Pairs(x)
{
x.t("senders","receivers");
x.t("active","client");
x.t("active","actual");
x.t("equal","values");
x.t("m.parentnode.insertbefore","window");
x.t("method","description");
x.t("method","complete");
x.t("method","information");
x.t("method","used");
x.t("method","9.3.2.1");
x.t("method","sysrecvbufsize");
x.t("creation","encrypted");
x.t("udp-based","multicast");
x.t("available","channel");
x.t("available","via");
x.t("available","pingtimeout");
x.t("available","write");
x.t("available","protocoltype");
x.t("available","across");
x.t("negotiation","refer");
x.t("negotiation","provided");
x.t("negotiation","process");
x.t("blocking","manner");
x.t("blocking","true");
x.t("blocking","i/o");
x.t("manner","channel");
x.t("intends","exchange");
x.t("indicated","server");
x.t("coupling","channel");
x.t("compression","negotiation");
x.t("compression","types");
x.t("compression","client");
x.t("compression","negotiated");
x.t("credentialsinfo","credentialsinfo");
x.t("credentialsinfo","object");
x.t("proxy","credentials");
x.t("version","increase");
x.t("version","protocol");
x.t("channel.ioctl","values");
x.t("every","pingtimeout");
x.t("9.15.1.1","credentialsinfo");
x.t("neutral","change");
x.t("channelwritelocking","accessor");
x.t("clear","clears");
x.t(".l=1","new");
x.t("create","ua-55718642-4");
x.t("table","connectoptions");
x.t("description","unifiednetworkinfo");
x.t("sending","receiving");
x.t("refer","section");
x.t("multicastopts","substructure");
x.t("mechanism","enables");
x.t("mechanism","allow");
x.t("layer","data");
x.t("niprovider","send");
x.t("enabled","information");
x.t("user","created");
x.t("locking","writing");
x.t("locking","reading");
x.t("platforms","connectiontype");
x.t("guaranteed","number");
x.t("guaranteed","output");
x.t("handled","single");
x.t("until","i/o");
x.t("necessary","work");
x.t("provided","via");
x.t("provided","help");
x.t("extension","transport");
x.t("modified","transport");
x.t("type","compression");
x.t("type","connection");
x.t("type","client");
x.t("change","negotiation");
x.t("change","extension");
x.t("change","depend");
x.t("change","transport");
x.t("introduction","incompatible");
x.t("time","pingtimeout");
x.t("time","outcome");
x.t("time","information");
x.t("sequential","input");
x.t("connectiontypes.unidir_shmem","information");
x.t("64kb","method");
x.t("64kb","clear");
x.t("connection","compression");
x.t("connection","locking");
x.t("connection","time");
x.t("connection","transport.connect");
x.t("connection","parameters");
x.t("connection","tcpopts");
x.t("connection","protocoltype");
x.t("connection","types");
x.t("connection","rejected");
x.t("connection","establish");
x.t("connection","value");
x.t("connection","type-specific");
x.t("connection","specific");
x.t("connection","becomes");
x.t("connection","9.3.2");
x.t("connection","setting");
x.t("thumb","send");
x.t("9.4.3","tunnelinginfo");
x.t("a=s.createelement","(o)");
x.t("networks","different");
x.t("networks","unifiednetworkinfo");
x.t("networks","typically");
x.t("channel","user");
x.t("channel","writing");
x.t("channel","prior");
x.t("channel","determining");
x.t("channel","transport");
x.t("channel","returned");
x.t("channel","becomes");
x.t("channel","typically");
x.t("channel","i/o");
x.t("channel","reading");
x.t("default","size");
x.t("new","date");
x.t("guaranteedoutputbuffers","guaranteed");
x.t("single","network");
x.t("details","refer");
x.t("document","script");
x.t("backward","compatible");
x.t("watch","list");
x.t("size","64kb");
x.t("size","changed");
x.t("size","used");
x.t("pageview","transport");
x.t("http","udp-based");
x.t("http","encrypted");
x.t("initialization","time");
x.t("initialization","channel");
x.t("list","associated");
x.t("shmemopts","substructure");
x.t("channelreadlocking","accessor");
x.t("indicates","default");
x.t("outbound","connection");
x.t("complete","initialization");
x.t("complete","control");
x.t("connectoptions","methods");
x.t("api","java");
x.t("network","receive");
x.t("network","read");
x.t("network","typically");
x.t("credentials","information");
x.t("increase","associated");
x.t("connectiontypes.reliable_mcast","information");
x.t("check","connection");
x.t("connectiontypes.http","connectiontypes.encrypted");
x.t("tcp-based","connection");
x.t("tcp-based","socket");
x.t("recommended","application");
x.t("substructure","containing");
x.t("writing","complete");
x.t("writing","data");
x.t("writing","using");
x.t("writing","sysrecvbufsize");
x.t("desired","ping");
x.t("true","blocking");
x.t("via","channel.ioctl");
x.t("via","minorversion");
x.t("via","protocoltype");
x.t("via","majorversion");
x.t("operation","completed");
x.t("operation","input");
x.t("transport.connect","method");
x.t("stored","userspecobject");
x.t("settings","used");
x.t("creating","connection");
x.t("creating","outbound");
x.t("connectiontype","type");
x.t("connectiontype","socket");
x.t("connectiontype","described");
x.t("clients","desired");
x.t("returning","blocking");
x.t("enables","application");
x.t("changed","via");
x.t("bytes","handled");
x.t("cycles","perform");
x.t("perform","necessary");
x.t("methods","method");
x.t("methods","table");
x.t("methods","function");
x.t("window","document");
x.t("parameters","sending");
x.t("parameters","used");
x.t("receivers","e.g");
x.t("9.1.2.2","guaranteedoutputbuffers");
x.t("9.1.2.2","information");
x.t("rule","thumb");
x.t("prior","returning");
x.t("prior","connect");
x.t("compatible","change");
x.t("useful","coupling");
x.t("connectiontypes.encrypted","fully");
x.t("pingtimeout","clients");
x.t("pingtimeout","value");
x.t("pingtimeout","seconds");
x.t("completed","blocking");
x.t("userspecobject","channel");
x.t("userspecobject","reference");
x.t("memory-based","connection");
x.t("encrypted","connection");
x.t("encrypted","tcp-based");
x.t("encrypted","information");
x.t("allow","efficient");
x.t("write","output");
x.t("incompatible","change");
x.t("minorversion","information");
x.t("minorversion","minor");
x.t("accessor","method");
x.t("(o)","m=s.getelementsbytagname");
x.t("(o)","[0]");
x.t("receiving","network");
x.t("receiving","different");
x.t("input","buffers");
x.t("addition","transport.connect");
x.t("auto","send");
x.t("tcpopts","tcpopts");
x.t("tcpopts","object");
x.t("supported","compression");
x.t("supported","platforms");
x.t("9.15.2.3","blocking");
x.t("options","refer");
x.t("options","settings");
x.t("options","valid");
x.t("space","available");
x.t("protocoltype","indicated");
x.t("protocoltype","channel");
x.t("protocoltype","client");
x.t("protocoltype","protocol");
x.t("depend","information");
x.t("number","sequential");
x.t("number","bytes");
x.t("number","buffers");
x.t("connectiontypes","refer");
x.t("control","returned");
x.t("system\u2019s","receive");
x.t("system\u2019s","send");
x.t("function","[r]");
x.t("function","googleanalyticsobject");
x.t("segmentednetworkinfo","connection");
x.t("segmentednetworkinfo","described");
x.t("maximum","number");
x.t("determining","desired");
x.t("multicast-based","connection");
x.t("clears","object");
x.t("different","networks");
x.t("different","groups");
x.t("receive","segmentednetworkinfo");
x.t("receive","buffer");
x.t("may","change");
x.t("may","performed");
x.t("exchange","connection");
x.t("specifies","connection");
x.t("connectiontypes.sequenced_mcast","information");
x.t("chapter","transport");
x.t("detailed","view");
x.t("transport","layer");
x.t("transport","api");
x.t("transport","preserved");
x.t("transport","package");
x.t("section","9.15.1.1");
x.t("section","9.4.3");
x.t("section","9.1.2.2");
x.t("section","9.15.2.3");
x.t("section","9.8");
x.t("section","10.5.1");
x.t("section","9.3.2.2");
x.t("section","9.12");
x.t("section","9.3.2.4");
x.t("section","9.3.2.5");
x.t("section","9.3.2.6");
x.t("section","9.3.2.7");
x.t("socket","http");
x.t("types","available");
x.t("types","compression");
x.t("types","information");
x.t("allocated","initialization");
x.t("returned","transport.connect");
x.t("returned","application");
x.t("match","protocoltype");
x.t("rejected","channel");
x.t("client","intends");
x.t("client","enabled");
x.t("client","specifies");
x.t("client","performed");
x.t("client","server");
x.t("notification","mechanism");
x.t("reference","application");
x.t("fully","backward");
x.t("fully","connected/mesh");
x.t("groups","senders");
x.t("tunneling","connection");
x.t("outcome","negotiation");
x.t("reused","chapter");
x.t("buffers","allocated");
x.t("buffers","made");
x.t("buffers","allocate");
x.t("numinputbuffers","number");
x.t("performing","operations");
x.t("java","edition");
x.t("unifiednetworkinfo","unifiednetworkinfo");
x.t("unifiednetworkinfo","described");
x.t("unifiednetworkinfo","object");
x.t("multicast","connection");
x.t("multicast","networks");
x.t("e.g","niprovider");
x.t("actual","negotiated");
x.t("communicating","details");
x.t("9.3","creating");
x.t("establish","creation");
x.t("made","available");
x.t("less","equal");
x.t("compressiontype","type");
x.t("allocate","reading");
x.t("value","modified");
x.t("value","channel");
x.t("value","may");
x.t("value","becomes");
x.t("value","negotiated");
x.t("type-specific","options");
x.t("send","pageview");
x.t("send","network");
x.t("send","heartbeat");
x.t("send","buffer");
x.t("specific","options");
x.t("(arguments)","[r]");
x.t("connected/mesh","multicast");
x.t("9.8","numinputbuffers");
x.t("process","client");
x.t("10.5.1","userspecobject");
x.t("10.5.1","minorversion");
x.t("10.5.1","majorversion");
x.t("view","9.3");
x.t("m=s.getelementsbytagname","(o)");
x.t("[0]","a.async=1");
x.t("connectiontypes.socket","connectiontypes.http");
x.t("read","operation");
x.t("read","data");
x.t("heartbeat","every");
x.t("valid","http");
x.t("script","//www.google-analytics.com/analytics.js");
x.t("output","space");
x.t("output","buffers");
x.t("help","client");
x.t("major","version");
x.t("larger","64kb");
x.t(".push","(arguments)");
x.t("ua-55718642-4","auto");
x.t("data","available");
x.t("data","neutral");
x.t("data","guaranteed");
x.t("data","controls");
x.t("information","refer");
x.t("information","provided");
x.t("information","channel");
x.t("information","watch");
x.t("information","useful");
x.t("information","supported");
x.t("information","connectiontypes");
x.t("information","communicating");
x.t("information","specific");
x.t("information","becomes");
x.t("information","tunnelinginfo");
x.t("information","content");
x.t("becomes","active");
x.t("becomes","available");
x.t("9.3.2","creating");
x.t("timeout","value");
x.t("timeout","typically");
x.t("shared","memory-based");
x.t("seqmcastopts","substructure");
x.t("application","addition");
x.t("application","performing");
x.t("application","value");
x.t("application","read");
x.t("application","leverage");
x.t("application","i/o");
x.t("values","less");
x.t("values","larger");
x.t("described","detail");
x.t("efficient","reading");
x.t("syssendbufsize","accessor");
x.t("date","a=s.createelement");
x.t("//www.google-analytics.com/analytics.js","create");
x.t("protocol","type");
x.t("protocol","client");
x.t("typically","recommended");
x.t("typically","major");
x.t("typically","used");
x.t("typically","minor");
x.t("prevents","application");
x.t("leverage","i/o");
x.t("work","application");
x.t("applications","manage");
x.t("edition","connectoptions");
x.t("controls","maximum");
x.t("negotiated","client");
x.t("negotiated","value");
x.t("negotiated","server");
x.t("tunnelinginfo","refer");
x.t("tunnelinginfo","tunnelinginfo");
x.t("tunnelinginfo","object");
x.t("preserved","stored");
x.t("created","information");
x.t("call","syssendbufsize");
x.t("package","detailed");
x.t("9.3.2.1","connectoptions");
x.t(".q=i","[r]");
x.t("used","blocking");
x.t("used","sending");
x.t("used","connectiontypes.unidir_shmem");
x.t("used","connection");
x.t("used","channel");
x.t("used","connectiontypes.reliable_mcast");
x.t("used","check");
x.t("used","connectiontype");
x.t("used","rule");
x.t("used","system\u2019s");
x.t("used","connectiontypes.sequenced_mcast");
x.t("used","multicast");
x.t("used","connectiontypes.socket");
x.t("manage","information");
x.t("system","call");
x.t("[r]",".l=1");
x.t("[r]","function");
x.t("[r]",".push");
x.t("[r]",".q=i");
x.t("[r]","[r]");
x.t("9.3.2.2","segmentednetworkinfo");
x.t("9.12","compressiontype");
x.t("using","cycles");
x.t("containing","multicast-based");
x.t("containing","shared");
x.t("setting","indicates");
x.t("setting","setting");
x.t("connect","system");
x.t("a.async=1","a.src=g");
x.t("across","supported");
x.t("i/o","operation");
x.t("i/o","notification");
x.t("i/o","prevents");
x.t("i/o","typically");
x.t("i/o","used");
x.t("distributed","information");
x.t("sysrecvbufsize","prior");
x.t("sysrecvbufsize","accessor");
x.t("googleanalyticsobject","[r]");
x.t("performed","connection");
x.t("performed","client");
x.t("operations","until");
x.t("associated","introduction");
x.t("associated","connection");
x.t("associated","fully");
x.t("9.3.2.4","multicastopts");
x.t("9.3.2.5","shmemopts");
x.t("9.3.2.5","connectiontype");
x.t("minor","version");
x.t("representing","proxy");
x.t("representing","connection");
x.t("representing","tcp-based");
x.t("representing","tunneling");
x.t("reading","channelwritelocking");
x.t("reading","writing");
x.t("reading","data");
x.t("ping","timeout");
x.t("9.3.2.6","seqmcastopts");
x.t("buffer","size");
x.t("a.src=g","m.parentnode.insertbefore");
x.t("object","reused");
x.t("object","representing");
x.t("detail","section");
x.t("server","connection");
x.t("server","may");
x.t("server","match");
x.t("server","information");
x.t("server","applications");
x.t("seconds","information");
x.t("content","distributed");
x.t("majorversion","major");
x.t("majorversion","information");
x.t("9.3.2.7","channelreadlocking");
}
