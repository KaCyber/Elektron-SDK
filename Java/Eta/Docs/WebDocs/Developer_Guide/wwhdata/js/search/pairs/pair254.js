function FileData_Pairs(x)
{
x.t("example","example");
x.t("example","shows");
x.t("example","demonstrates");
x.t("example","function");
x.t("example","may");
x.t("example","chapter");
x.t("example","section");
x.t("example","following");
x.t("example","elementlist");
x.t("four","elemententry");
x.t("included","elemlist.applyhasstandarddata");
x.t("passed","pre-encoded");
x.t("complex","element");
x.t("m.parentnode.insertbefore","window");
x.t("method","however");
x.t("else","elementlistinit");
x.t("parameter","passed");
x.t("parameter","false");
x.t("parameter","true");
x.t("pattern","used");
x.t("version","information");
x.t("time.minute","(21)");
x.t("clear","elemententryname.data");
x.t("elementry.encodeddata","(encuint)");
x.t("(enciter)","third");
x.t("(enciter)","fourth");
x.t(".l=1","new");
x.t("create","single");
x.t("create","ua-55718642-4");
x.t("(datatypes.time)","retcode");
x.t("(datatypes.real)","retcode");
x.t("container","elementry.name");
x.t("container","type");
x.t("container","types");
x.t("container","using");
x.t("container","encoding");
x.t("millisecond","time");
x.t("blank","elementry.name");
x.t("blank","real");
x.t("shows","encoding");
x.t("cache","elemlist.elementlistnum");
x.t("(16)","time.millisecond");
x.t("elementry.name","(elemententryname)");
x.t("cleared","clearing");
x.t("field","list");
x.t("field","entries");
x.t("roll","back");
x.t("time.second","(16)");
x.t("-----","continue");
x.t("type","pattern");
x.t("type","populate");
x.t("type","fieldlist");
x.t("type","second");
x.t("type","elemententry");
x.t("populate","element");
x.t("populate","elementlistnum");
x.t("populate","hour");
x.t("populate","encode");
x.t("enciter","time");
x.t("enciter","null");
x.t("enciter","already");
x.t("enciter","success");
x.t("enciter","encode");
x.t("time","type");
x.t("time","populate");
x.t("time","time");
x.t("time","primitive");
x.t("time","second");
x.t("time","codecfactory.createtime");
x.t("however","additional");
x.t("codecfactory.createelemententry","stack");
x.t("a=s.createelement","(o)");
x.t("primitive","elementry.name");
x.t("primitive","type");
x.t("primitive","time");
x.t("needed","cache");
x.t("assumes","enciter");
x.t("back","success");
x.t("back","encoding");
x.t("text","system.out.printf");
x.t("text","s\\n");
x.t("elemententryname","codecfactory.createbuffer");
x.t("new","date");
x.t("element","list");
x.t("element","need");
x.t("element","elemententryname.data");
x.t("element","entry");
x.t("element","re-populating");
x.t("element","names");
x.t("single","elemententry");
x.t("document","script");
x.t("pageview","transport");
x.t("list","assumes");
x.t("list","fieldlist.applyhasstandarddata");
x.t("list","structure");
x.t("list","using");
x.t("list","encoding");
x.t("info","needed");
x.t("need","clear");
x.t("need","ensure");
x.t("appropriately","cleared");
x.t("emptied","elementry.clear");
x.t("error.text","else");
x.t("elementry","codecfactory.createelemententry");
x.t("elemententryname.data","element1");
x.t("elemententryname.data","element2");
x.t("elemententryname.data","element3");
x.t("elemententryname.data","element4");
x.t("complete","nested");
x.t("complete","elementlist");
x.t("complete","encoding");
x.t("api","java");
x.t("entry","container");
x.t("entry","blank");
x.t("entry","field");
x.t("entry","time");
x.t("entry","primitive");
x.t("entry","name");
x.t("entry","preencoded");
x.t("entry","elemententry");
x.t("entry","used");
x.t("entry","encode");
x.t("entry","encoding");
x.t("pre-encoded","elementry.name");
x.t("pre-encoded","data");
x.t("pre-encoded","buffer");
x.t("(elemententryname)","elementry.datatype");
x.t("false","roll");
x.t("false","retcode");
x.t("false","print");
x.t("re-populating","values");
x.t("sure","approximate");
x.t("true","finalize");
x.t("elemlist.encodecomplete","enciter");
x.t("demonstrates","error");
x.t("demonstrates","encode");
x.t("name","datatype");
x.t("name","values");
x.t("elemlist.applyhasstandarddata","elemlist.checkhasinfo");
x.t("populated","elementry.encodeddata");
x.t("populated","buffer");
x.t("minute","second");
x.t("approximate","max");
x.t("window","document");
x.t("fieldlist","container");
x.t("fieldlist","populate");
x.t("prior","encodeinit");
x.t("prior","call");
x.t("methods","begin");
x.t("fieldlist.encodeinit","enciter");
x.t("standard","name");
x.t("standard","data");
x.t("indicate","standard");
x.t("determine","success");
x.t("continue","encoding");
x.t("encoded","elementlistnum");
x.t("encoded","uint");
x.t("elementlistnum","included");
x.t("elementlistnum","info");
x.t("elementlistnum","values");
x.t("stack","allocate");
x.t("third","element");
x.t("third","encodes");
x.t("string","value");
x.t("(o)","m=s.getelementsbytagname");
x.t("(o)","[0]");
x.t("second","millisecond");
x.t("second","element");
x.t("second","encodes");
x.t("uint","type");
x.t("uint","third");
x.t("datatype","value");
x.t("datatype","information");
x.t("auto","send");
x.t("simplify","example");
x.t("begin","complex");
x.t("begin","encoding");
x.t("store","return");
x.t("preencoded","buffer");
x.t("failed","success");
x.t("error","text");
x.t("error","handling");
x.t("error","condition");
x.t("error","errno");
x.t("(777)","buffer");
x.t("elemlist.elementlistnum","(5)");
x.t("codecreturncodes.success","-----");
x.t("codecreturncodes.success","error");
x.t("codecfactory.createtime","time.hour");
x.t("elementry.datatype","(datatypes.time)");
x.t("elementry.datatype","(datatypes.real)");
x.t("elementry.datatype","(datatypes.field_list)");
x.t("elementry.datatype","(datatypes.uint)");
x.t("first","element");
x.t("first","encodes");
x.t("function","[r]");
x.t("function","googleanalyticsobject");
x.t("elementlistinit","encoding");
x.t("encuint","buffer");
x.t("length","retcode");
x.t("length","data");
x.t("elementry.clear","elemententryname.data");
x.t("max","encoding");
x.t("encodeinit","retcode");
x.t("may","correspond");
x.t("chapter","data");
x.t("system.out.printf","error");
x.t("detailed","view");
x.t("transport","api");
x.t("handling","initial");
x.t("handling","omitted");
x.t("properly","emptied");
x.t("properly","populated");
x.t("clearing","ensure");
x.t("section","section");
x.t("section","11.3.1");
x.t("fieldlist.encodecomplete","enciter");
x.t("types","11.3.2");
x.t("initial","encode");
x.t("omitted","simplify");
x.t("elementlist.encodeinit","error");
x.t("elementlist.encodeinit","note");
x.t("retcode","elemlist.encodecomplete");
x.t("retcode","fieldlist.encodeinit");
x.t("retcode","fieldlist.encodecomplete");
x.t("retcode","elementry.encodecomplete");
x.t("retcode","elementry.encodeinit");
x.t("retcode","elementry.encodeblank");
x.t("retcode","elemlist.encodeinit");
x.t("retcode","elementry.encode");
x.t("switch","success");
x.t("correspond","actual");
x.t("elemlist.checkhasinfo","populate");
x.t("code","example");
x.t("return","value");
x.t("(21)","time.second");
x.t("encodes","four");
x.t("encodes","blank");
x.t("encodes","entry");
x.t("encodes","pre-encoded");
x.t("encodes","fieldlist");
x.t("message","return");
x.t("error.syserror","error.text");
x.t("java","edition");
x.t("actual","name");
x.t("(10)","time.minute");
x.t("ensure","elemententry");
x.t("ensure","encdata");
x.t("elementry.encodecomplete","enciter");
x.t("null","codecreturncodes.success");
x.t("fourth","element");
x.t("fourth","entry");
x.t("fourth","encodes");
x.t("failure","retcode");
x.t("----","complete");
x.t("value","text");
x.t("value","false");
x.t("value","determine");
x.t("value","string");
x.t("value","fourth");
x.t("value","data");
x.t("additional","error");
x.t("allocate","time");
x.t("elementry.encodeinit","enciter");
x.t("send","pageview");
x.t("already","populated");
x.t("specific","encode");
x.t("11.3.1","----");
x.t("(arguments)","[r]");
x.t("condition","switch");
x.t("time.hour","(10)");
x.t("fieldlist.applyhasstandarddata","retcode");
x.t("view","11.3");
x.t("11.3","container");
x.t("11.3.2","elementlist");
x.t("m=s.getelementsbytagname","(o)");
x.t("[0]","a.async=1");
x.t("encountered","elementlist.encodeinit");
x.t("11.3.2.4","elementlist");
x.t("script","//www.google-analytics.com/analytics.js");
x.t(".push","(arguments)");
x.t("ua-55718642-4","auto");
x.t("data","parameter");
x.t("data","populate");
x.t("data","encoded");
x.t("data","properly");
x.t("data","elemententry");
x.t("data","package");
x.t("information","element");
x.t("information","store");
x.t("codecfactory.createbuffer","first");
x.t("error.errorid","error.syserror");
x.t("assuming","encuint");
x.t("nested","container");
x.t("values","indicate");
x.t("values","first");
x.t("values","elemententry");
x.t("values","used");
x.t("successful","create");
x.t("reuse","entry");
x.t("structure","prior");
x.t("print","message");
x.t("s\\n","error.errorid");
x.t("elementry.encodeblank","(enciter)");
x.t("date","a=s.createelement");
x.t("//www.google-analytics.com/analytics.js","create");
x.t("note","element");
x.t("errno","encountered");
x.t("elemlist.encodeinit","enciter");
x.t("element1","primitive");
x.t("itself","retcode");
x.t("edition","elementlist");
x.t("elemententry","example");
x.t("elemententry","need");
x.t("elemententry","appropriately");
x.t("elemententry","elementry");
x.t("elemententry","values");
x.t("elemententry","reuse");
x.t("elemententry","itself");
x.t("real","primitive");
x.t("real","value");
x.t("call","elementlist.encodeinit");
x.t("time.millisecond","(777)");
x.t("element2","pre-encoded");
x.t("encdata","properly");
x.t("enciterator","element");
x.t("package","detailed");
x.t(".q=i","[r]");
x.t("following","example");
x.t("used","example");
x.t("used","encode");
x.t("elementry.encode","(enciter)");
x.t("elementry.encode","enciter");
x.t("element3","blank");
x.t("(datatypes.field_list)","begin");
x.t("[r]",".l=1");
x.t("[r]","function");
x.t("[r]",".push");
x.t("[r]",".q=i");
x.t("[r]","[r]");
x.t("containing","encoded");
x.t("(5)","begin");
x.t("hour","minute");
x.t("(datatypes.uint)","assuming");
x.t("element4","container");
x.t("using","specific");
x.t("using","enciterator");
x.t("finalize","encoding");
x.t("a.async=1","a.src=g");
x.t("(encuint)","data");
x.t("googleanalyticsobject","[r]");
x.t("names","elementlistnum");
x.t("success","parameter");
x.t("success","complete");
x.t("success","false");
x.t("success","code");
x.t("success","failure");
x.t("success","value");
x.t("elementlist","encodes");
x.t("elementlist","11.3.2.4");
x.t("elementlist","encoding");
x.t("encode","method");
x.t("encode","container");
x.t("encode","element");
x.t("encode","entry");
x.t("encode","methods");
x.t("encode","fourth");
x.t("encode","nested");
x.t("encode","elementlist");
x.t("buffer","version");
x.t("buffer","elemententryname");
x.t("buffer","length");
x.t("buffer","containing");
x.t("entries","example");
x.t("encoding","example");
x.t("encoding","complex");
x.t("encoding","field");
x.t("encoding","element");
x.t("encoding","sure");
x.t("encoding","prior");
x.t("encoding","standard");
x.t("encoding","failed");
x.t("encoding","length");
x.t("encoding","retcode");
x.t("encoding","successful");
x.t("encoding","success");
x.t("a.src=g","m.parentnode.insertbefore");
}
