function FileData_Pairs(x)
{
x.t("example","uses");
x.t("example","map");
x.t("example","function");
x.t("example","chapter");
x.t("example","section");
x.t("example","following");
x.t("housed","container");
x.t("housed","type");
x.t("m.parentnode.insertbefore","window");
x.t("method","perform");
x.t("method","application");
x.t("else","decoding");
x.t("else","retcode");
x.t("decodeiterator","calling");
x.t("decodeiterator","setting");
x.t("decodeentry","indicates");
x.t(".l=1","new");
x.t("create","primitive");
x.t("create","ua-55718642-4");
x.t("deciter","tempint");
x.t("deciter","null");
x.t("key","decoded");
x.t("key","decoding");
x.t("key","retcode");
x.t("tempint","codecreturncodes.end_of_container");
x.t("tempint","codecfactory.createint");
x.t("summary","data");
x.t("fieldlist.decode","deciter");
x.t("container","type");
x.t("container","types");
x.t("user","wants");
x.t("uses","decodeiterator");
x.t("uses","mapentry.decode");
x.t("field","entries");
x.t("statement","allow");
x.t("sample","uses");
x.t("sample","assumes");
x.t("sample","demonstrates");
x.t("sample","error");
x.t("type","map.containertype");
x.t("type","fieldlist");
x.t("type","instead");
x.t("type","switch");
x.t("map.checkhassummarydata","summary");
x.t("tends","unrecoverable");
x.t("11.3.3.7","mapentry");
x.t("a=s.createelement","(o)");
x.t("structured","decode");
x.t("assumes","housed");
x.t("primitive","value");
x.t("invoking","decoder");
x.t("unrecoverable","system.out.printf");
x.t("text","s\\n");
x.t("new","decodeiterator");
x.t("new","iterator");
x.t("new","date");
x.t("contents","map");
x.t("single","map");
x.t("document","script");
x.t("pageview","transport");
x.t("keyprimitivetype","datatypes.int");
x.t("keyprimitivetype","decodes");
x.t("indicates","upa");
x.t("map.containertype","retcode");
x.t("error.text","else");
x.t("error.text","code");
x.t("api","java");
x.t("entry","decoder");
x.t("entry","reuse");
x.t("entry","contained");
x.t("entry","passing");
x.t("iterator","simplify");
x.t("decoded","single");
x.t("demonstrates","decoding");
x.t("perform","key");
x.t("codecreturncodes.end_of_container","retcode");
x.t("window","document");
x.t("fieldlist","keyprimitivetype");
x.t("generic","map");
x.t("continue","decoding");
x.t("map","structured");
x.t("map","11.3.3.7");
x.t("map","entry");
x.t("map","decoding");
x.t("map","structure");
x.t("11.3.1.6","else");
x.t("11.3.1.6","decode");
x.t("allow","generic");
x.t("int","tempint");
x.t("(o)","m=s.getelementsbytagname");
x.t("(o)","[0]");
x.t("auto","send");
x.t("simplify","sample");
x.t("present","type");
x.t("present","invoking");
x.t("error","text");
x.t("error","handling");
x.t("error","errno");
x.t("codecreturncodes.success","create");
x.t("codecreturncodes.success","decoding");
x.t("codecfactory.createint","summary");
x.t("datatypes.int","sample");
x.t("map.decode","error");
x.t("map.decode","(deciter)");
x.t("decoding","example");
x.t("decoding","field");
x.t("decoding","map");
x.t("decoding","failure");
x.t("decoding","typically");
x.t("function","[r]");
x.t("function","googleanalyticsobject");
x.t("decoder","housed");
x.t("decoder","example");
x.t("decoder","method");
x.t("decoder","type");
x.t("decodes","mapentry");
x.t("chapter","data");
x.t("instead","decodeentry");
x.t("system.out.printf","error");
x.t("detailed","view");
x.t("transport","api");
x.t("handling","omitted");
x.t("(deciter)","codecreturncodes.success");
x.t("section","11.3.1.6");
x.t("types","11.3.3");
x.t("switch","statement");
x.t("calling","content\u2019s");
x.t("omitted","decode");
x.t("retcode","fieldlist.decode");
x.t("retcode","codecreturncodes.success");
x.t("retcode","map.decode");
x.t("retcode","mapentry.decode");
x.t("code","example");
x.t("error.syserror","error.text");
x.t("java","edition");
x.t("null","continue");
x.t("encodeddata","new");
x.t("failure","tends");
x.t("value","key");
x.t("value","sample");
x.t("send","pageview");
x.t("specific","container-type");
x.t("(arguments)","[r]");
x.t("view","11.3");
x.t("11.3","container");
x.t("m=s.getelementsbytagname","(o)");
x.t("[0]","a.async=1");
x.t("decode","summary");
x.t("decode","contents");
x.t("decode","entry");
x.t("decode","map");
x.t("encountered","map.decode");
x.t("encountered","mapentry.decode");
x.t("11.3.3","map");
x.t("script","//www.google-analytics.com/analytics.js");
x.t(".push","(arguments)");
x.t("ua-55718642-4","auto");
x.t("mapentry.decode","method");
x.t("mapentry.decode","deciter");
x.t("mapentry.decode","error");
x.t("data","map.checkhassummarydata");
x.t("data","present");
x.t("data","package");
x.t("error.errorid","error.syserror");
x.t("mapentry","key");
x.t("mapentry","decoding");
x.t("application","optionally");
x.t("application","invoke");
x.t("reuse","int");
x.t("structure","retcode");
x.t("s\\n","error.errorid");
x.t("date","a=s.createelement");
x.t("//www.google-analytics.com/analytics.js","create");
x.t("errno","encountered");
x.t("typically","application");
x.t("content\u2019s","decoder");
x.t("optionally","new");
x.t("edition","mapentry");
x.t("package","detailed");
x.t(".q=i","[r]");
x.t("following","sample");
x.t("contained","value");
x.t("wants","decode");
x.t("[r]",".l=1");
x.t("[r]","function");
x.t("[r]",".push");
x.t("[r]",".q=i");
x.t("[r]","[r]");
x.t("container-type","decoder");
x.t("setting","encodeddata");
x.t("a.async=1","a.src=g");
x.t("googleanalyticsobject","[r]");
x.t("invoke","specific");
x.t("passing","keyprimitivetype");
x.t("upa","user");
x.t("entries","example");
x.t("a.src=g","m.parentnode.insertbefore");
}
