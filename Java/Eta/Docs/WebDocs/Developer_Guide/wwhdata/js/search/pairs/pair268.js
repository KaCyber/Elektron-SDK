function FileData_Pairs(x)
{
x.t("example","demonstrates");
x.t("example","function");
x.t("example","chapter");
x.t("example","section");
x.t("example","encodes");
x.t("example","additional");
x.t("example","following");
x.t("example","series");
x.t("m.parentnode.insertbefore","window");
x.t("method","simplify");
x.t("else","series");
x.t("parameter","false");
x.t("parameter","true");
x.t("version","information");
x.t("codecfactory.createelementlist","encode");
x.t("clear","begin");
x.t("(enciter)","complete");
x.t(".l=1","new");
x.t("create","single");
x.t("create","ua-55718642-4");
x.t("init","done");
x.t("init","encoding");
x.t("unencoded","element");
x.t("unencoded","data");
x.t("summary","data");
x.t("container","types");
x.t("container","using");
x.t("container","encoding");
x.t("roll","back");
x.t("-----","continue");
x.t("sample","illustrates");
x.t("populate","containertype");
x.t("populate","series");
x.t("enciter","codecreturncodes.success");
x.t("enciter","null");
x.t("enciter","already");
x.t("enciter","success");
x.t("enciter","encode");
x.t("type","match");
x.t("payload","data");
x.t("(2)","begin");
x.t("total","count");
x.t("unknown","retcode");
x.t("unknown","pass");
x.t("encelementlist","buffer");
x.t("series.encodecomplete","enciter");
x.t("a=s.createelement","(o)");
x.t("count","hint");
x.t("assumes","enciter");
x.t("back","success");
x.t("back","encoding");
x.t("text","system.out.printf");
x.t("text","s\\n");
x.t("elementlist.applyhasstandarddata","retcode");
x.t("new","date");
x.t("element","list");
x.t("element","entries");
x.t("single","seriesentry");
x.t("document","script");
x.t("pageview","transport");
x.t("list","example");
x.t("list","type");
x.t("list","second");
x.t("list","using");
x.t("list","encoding");
x.t("error.text","else");
x.t("complete","nested");
x.t("complete","series");
x.t("complete","encoding");
x.t("api","java");
x.t("entry","unencoded");
x.t("entry","pre-encoded");
x.t("entry","encoded");
x.t("entry","seriesentry");
x.t("entry","encode");
x.t("pre-encoded","payload");
x.t("pre-encoded","element");
x.t("pre-encoded","buffer");
x.t("false","roll");
x.t("false","retcode");
x.t("false","print");
x.t("elementlist.encodecomplete","enciter");
x.t("true","finalize");
x.t("demonstrates","error");
x.t("populated","seriesentry.encodeddata");
x.t("populated","buffer");
x.t("approximate","encoded");
x.t("window","document");
x.t("illustrates","encode");
x.t("prior","encodeinit");
x.t("prior","call");
x.t("methods","clear");
x.t("methods","begin");
x.t("indicate","summary");
x.t("series.totalcounthint","(2)");
x.t("determine","success");
x.t("continue","encoding");
x.t("encoded","unencoded");
x.t("encoded","length");
x.t("encoded","series.applyhassummarydata");
x.t("encoded","buffer");
x.t("encoded","elementlist");
x.t("series.containertype","(datatypes.element_list)");
x.t("series.containertype","encode");
x.t("string","value");
x.t("seriesentry.encodeddata","(encelementlist)");
x.t("(o)","m=s.getelementsbytagname");
x.t("(o)","[0]");
x.t("second","entry");
x.t("second","series");
x.t("auto","send");
x.t("simplify","example");
x.t("begin","encoding");
x.t("store","return");
x.t("failed","success");
x.t("error","text");
x.t("error","handling");
x.t("error","condition");
x.t("error","errno");
x.t("codecreturncodes.success","-----");
x.t("codecreturncodes.success","error");
x.t("first","entry");
x.t("first","series");
x.t("containertype","total");
x.t("function","[r]");
x.t("function","googleanalyticsobject");
x.t("length","unknown");
x.t("length","populated");
x.t("seriesentry.encodecomplete","enciter");
x.t("encodeinit","retcode");
x.t("11.3.4.4","series");
x.t("hint","encoded");
x.t("hint","series.containertype");
x.t("chapter","data");
x.t("system.out.printf","error");
x.t("detailed","view");
x.t("transport","api");
x.t("handling","initial");
x.t("handling","omitted");
x.t("match","series.containertype");
x.t("section","11.3.2");
x.t("seriesentry.encodeinit","enciter");
x.t("types","11.3.4");
x.t("initial","encode");
x.t("omitted","performed");
x.t("retcode","series.encodecomplete");
x.t("retcode","elementlist.encodecomplete");
x.t("retcode","seriesentry.encodecomplete");
x.t("retcode","seriesentry.encodeinit");
x.t("retcode","elementlist.encodeinit");
x.t("retcode","series.encodeinit");
x.t("retcode","seriesentry.encode");
x.t("retcode","series.encodesummarydatacomplete");
x.t("switch","success");
x.t("expected","summary");
x.t("elementlist.encodeinit","enciter");
x.t("(datatypes.element_list)","series.totalcounthint");
x.t("code","example");
x.t("return","value");
x.t("encodes","two");
x.t("seriesentry","seriesentry");
x.t("seriesentry","codecfactory.createseriesentry");
x.t("seriesentry","values");
x.t("seriesentry","elementlist");
x.t("message","return");
x.t("error.syserror","error.text");
x.t("java","edition");
x.t("null","codecreturncodes.success");
x.t("failure","summary");
x.t("----","complete");
x.t("additional","error");
x.t("value","text");
x.t("value","false");
x.t("value","determine");
x.t("value","string");
x.t("codecfactory.createseriesentry","elementlist");
x.t("(encelementlist)","retcode");
x.t("send","pageview");
x.t("already","populated");
x.t("specific","encode");
x.t("(arguments)","[r]");
x.t("series.encodeinit","enciter");
x.t("series.encodeinit","type");
x.t("series.encodeinit","indicate");
x.t("series.encodeinit","error");
x.t("series.applyhassummarydata","series.applyhastotalcounthint");
x.t("condition","switch");
x.t("11.3.2","----");
x.t("view","11.3");
x.t("11.3","container");
x.t("m=s.getelementsbytagname","(o)");
x.t("[0]","a.async=1");
x.t("encountered","series.encodeinit");
x.t("script","//www.google-analytics.com/analytics.js");
x.t("seriesentry.encode","(enciter)");
x.t("11.3.4","series");
x.t(".push","(arguments)");
x.t("ua-55718642-4","auto");
x.t("data","init");
x.t("data","total");
x.t("data","element");
x.t("data","approximate");
x.t("data","first");
x.t("data","length");
x.t("data","package");
x.t("data","approx");
x.t("information","store");
x.t("error.errorid","error.syserror");
x.t("nested","container");
x.t("assuming","encelementlist");
x.t("values","example");
x.t("values","summary");
x.t("successful","create");
x.t("reuse","entry");
x.t("structure","prior");
x.t("print","message");
x.t("s\\n","error.errorid");
x.t("date","a=s.createelement");
x.t("//www.google-analytics.com/analytics.js","create");
x.t("two","seriesentry");
x.t("errno","encountered");
x.t("done","series.encodeinit");
x.t("series.applyhastotalcounthint","populate");
x.t("elementlist.clear","elementlist.applyhasstandarddata");
x.t("edition","series");
x.t("call","series.encodeinit");
x.t("enciterator","series");
x.t("series.encodesummarydatacomplete","enciter");
x.t("package","detailed");
x.t(".q=i","[r]");
x.t("following","sample");
x.t("contained","element");
x.t("[r]",".l=1");
x.t("[r]","function");
x.t("[r]",".push");
x.t("[r]",".q=i");
x.t("[r]","[r]");
x.t("containing","pre-encoded");
x.t("containing","encoded");
x.t("containing","elementlist");
x.t("using","specific");
x.t("using","enciterator");
x.t("approx","encoded");
x.t("finalize","encoding");
x.t("series","init");
x.t("series","assumes");
x.t("series","elementlist.applyhasstandarddata");
x.t("series","entry");
x.t("series","11.3.4.4");
x.t("series","structure");
x.t("series","elementlist.clear");
x.t("series","containing");
x.t("series","encoding");
x.t("a.async=1","a.src=g");
x.t("pass","retcode");
x.t("googleanalyticsobject","[r]");
x.t("performed","populate");
x.t("success","parameter");
x.t("success","complete");
x.t("success","false");
x.t("success","second");
x.t("success","first");
x.t("success","retcode");
x.t("success","code");
x.t("success","failure");
x.t("success","value");
x.t("encode","method");
x.t("encode","entry");
x.t("encode","methods");
x.t("encode","expected");
x.t("encode","nested");
x.t("encode","contained");
x.t("encode","series");
x.t("elementlist","codecfactory.createelementlist");
x.t("elementlist","assuming");
x.t("elementlist","values");
x.t("elementlist","reuse");
x.t("elementlist","elementlist");
x.t("buffer","version");
x.t("buffer","containing");
x.t("buffer","contains");
x.t("entries","example");
x.t("encoding","example");
x.t("encoding","summary");
x.t("encoding","element");
x.t("encoding","prior");
x.t("encoding","failed");
x.t("encoding","retcode");
x.t("encoding","successful");
x.t("encoding","series");
x.t("encoding","success");
x.t("a.src=g","m.parentnode.insertbefore");
x.t("contains","pre-encoded");
}
