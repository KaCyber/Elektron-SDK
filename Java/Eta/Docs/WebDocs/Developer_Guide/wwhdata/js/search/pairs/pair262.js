function FileData_Pairs(x)
{
x.t("example","demonstrates");
x.t("example","function");
x.t("example","may");
x.t("example","chapter");
x.t("example","section");
x.t("example","encodes");
x.t("example","additional");
x.t("example","mapentry");
x.t("example","following");
x.t("passed","key");
x.t("passed","pre-encoded");
x.t("map.keyprimitivetype","(datatypes.uint)");
x.t("mapentry.encode","(enciter)");
x.t("mapentry.encode","enciter");
x.t("m.parentnode.insertbefore","window");
x.t("method","simplify");
x.t("else","mapinit");
x.t("parameter","passed");
x.t("parameter","false");
x.t("parameter","true");
x.t("version","information");
x.t("clear","mapentry.action");
x.t("clear","begin");
x.t("(enciter)","third");
x.t(".l=1","new");
x.t("create","single");
x.t("create","ua-55718642-4");
x.t("init","done");
x.t("mapentry.encodeinit","enciter");
x.t("key","primitive");
x.t("key","third");
x.t("key","length");
x.t("key","value");
x.t("key","mapentry");
x.t("key","approx");
x.t("key","names");
x.t("summary","data");
x.t("action","type");
x.t("action","delete");
x.t("entrykeyuint.value","(1)");
x.t("entrykeyuint.value","(3)");
x.t("container","types");
x.t("container","using");
x.t("container","encoding");
x.t("field","list");
x.t("field","entries");
x.t("mapentry.action","(mapentryactions.add)");
x.t("mapentry.action","(mapentryactions.delete)");
x.t("mapentry.action","(mapentryactions.update)");
x.t("cleared","clearing");
x.t("roll","back");
x.t("-----","continue");
x.t("sample","illustrates");
x.t("type","passed");
x.t("type","example");
x.t("type","pre-encoded");
x.t("type","match");
x.t("populate","total");
x.t("populate","map");
x.t("populate","maps");
x.t("map.applyhastotalcounthint","populate");
x.t("enciter","100");
x.t("enciter","null");
x.t("enciter","already");
x.t("enciter","entrykeyuint");
x.t("enciter","success");
x.t("payload","need");
x.t("payload","data");
x.t("delete","action");
x.t("delete","actions");
x.t("delete","retcode");
x.t("11.3.3.6","mapentry");
x.t("total","count");
x.t("map.totalcounthint","(3)");
x.t("unknown","mapentry.action");
x.t("a=s.createelement","(o)");
x.t("count","map.totalcounthint");
x.t("count","hint");
x.t("assumes","enciter");
x.t("back","success");
x.t("back","encoding");
x.t("text","system.out.printf");
x.t("text","s\\n");
x.t("primitive","value");
x.t("new","date");
x.t("single","mapentry");
x.t("document","script");
x.t("pageview","transport");
x.t("keyprimitivetype","containertype");
x.t("list","type");
x.t("list","fieldlist.applyhasstandarddata");
x.t("list","using");
x.t("list","encoding");
x.t("need","clear");
x.t("need","ensure");
x.t("appropriately","cleared");
x.t("emptied","mapentry.clear");
x.t("add","action");
x.t("map.containertype","(datatypes.field_list)");
x.t("map.containertype","encode");
x.t("expect","summary");
x.t("error.text","else");
x.t("complete","map");
x.t("complete","nested");
x.t("complete","encoding");
x.t("mapentry.encodecomplete","enciter");
x.t("actions","payload");
x.t("api","java");
x.t("entry","delete");
x.t("entry","count");
x.t("entry","pre-encoded");
x.t("entry","encoded");
x.t("entry","uint");
x.t("entry","non");
x.t("entry","encode");
x.t("pre-encoded","key");
x.t("pre-encoded","payload");
x.t("pre-encoded","data");
x.t("pre-encoded","buffer");
x.t("map.encodeinit","enciter");
x.t("map.encodeinit","type");
x.t("map.encodeinit","error");
x.t("map.encodeinit","note");
x.t("false","roll");
x.t("false","retcode");
x.t("false","print");
x.t("re-populating","values");
x.t("enckey","properly");
x.t("true","finalize");
x.t("demonstrates","error");
x.t("name","values");
x.t("definition","data");
x.t("approximate","expected");
x.t("populated","mapentry.encodeddata");
x.t("populated","mapentry.encodedkey");
x.t("populated","buffer");
x.t("encfieldlist","buffer");
x.t("mapentry.encodeddata","(encfieldlist)");
x.t("bytes","definition");
x.t("window","document");
x.t("illustrates","encoding");
x.t("fieldlist","re-populating");
x.t("fieldlist","values");
x.t("fieldlist","reuse");
x.t("prior","encodeinit");
x.t("prior","call");
x.t("methods","clear");
x.t("methods","begin");
x.t("fieldlist.encodeinit","enciter");
x.t("indicate","summary");
x.t("determine","success");
x.t("continue","encoding");
x.t("11.3.1.5","----");
x.t("mapentry.encodedkey","(encuint)");
x.t("map","11.3.3.6");
x.t("map","assumes");
x.t("map","list");
x.t("map","entry");
x.t("map","fieldlist.clear");
x.t("map","structure");
x.t("map","containing");
x.t("map","encoding");
x.t("encoded","delete");
x.t("encoded","add");
x.t("encoded","fieldlist");
x.t("encoded","map.applyhassummarydata");
x.t("encoded","length");
x.t("encoded","update");
x.t("third","entry");
x.t("third","map");
x.t("string","value");
x.t("empty","delete");
x.t("(o)","m=s.getelementsbytagname");
x.t("(o)","[0]");
x.t("three","mapentry");
x.t("second","entry");
x.t("second","map");
x.t("uint","entrykeyuint");
x.t("auto","send");
x.t("simplify","example");
x.t("begin","encoding");
x.t("store","return");
x.t("failed","success");
x.t("mapentry.clear","mapentry.action");
x.t("error","text");
x.t("error","handling");
x.t("error","condition");
x.t("error","errno");
x.t("map.applyhassummarydata","map.applyhastotalcounthint");
x.t("codecreturncodes.success","-----");
x.t("codecreturncodes.success","error");
x.t("map.encodesummarydatacomplete","enciter");
x.t("(encfieldlist)","keydata");
x.t("first","entry");
x.t("first","map");
x.t("containertype","map.containertype");
x.t("fieldlist.clear","fieldlist.applyhasstandarddata");
x.t("function","[r]");
x.t("function","googleanalyticsobject");
x.t("length","unknown");
x.t("length","populated");
x.t("length","data");
x.t("encuint","buffer");
x.t("encodeinit","retcode");
x.t("may","correspond");
x.t("hint","approximate");
x.t("hint","encoded");
x.t("chapter","data");
x.t("system.out.printf","error");
x.t("detailed","view");
x.t("transport","api");
x.t("handling","initial");
x.t("handling","omitted");
x.t("match","map.containertype");
x.t("section","11.3.1.5");
x.t("fieldlist.encodecomplete","enciter");
x.t("properly","emptied");
x.t("properly","populated");
x.t("clearing","ensure");
x.t("types","11.3.3");
x.t("initial","encode");
x.t("omitted","performed");
x.t("expected","summary");
x.t("expected","entry");
x.t("retcode","mapentry.encode");
x.t("retcode","mapentry.encodeinit");
x.t("retcode","mapentry.encodecomplete");
x.t("retcode","map.encodeinit");
x.t("retcode","fieldlist.encodeinit");
x.t("retcode","map.encodesummarydatacomplete");
x.t("retcode","fieldlist.encodecomplete");
x.t("retcode","map.encodecomplete");
x.t("switch","success");
x.t("(1)","retcode");
x.t("correspond","actual");
x.t("keydata","parameter");
x.t("code","example");
x.t("return","value");
x.t("encodes","three");
x.t("100","bytes");
x.t("100","codecreturncodes.success");
x.t("message","return");
x.t("error.syserror","error.text");
x.t("java","edition");
x.t("actual","name");
x.t("ensure","mapentry");
x.t("ensure","encdata");
x.t("null","codecreturncodes.success");
x.t("failure","expect");
x.t("----","complete");
x.t("encodeddata","empty");
x.t("value","text");
x.t("value","false");
x.t("value","determine");
x.t("value","string");
x.t("value","second");
x.t("value","encodeddata");
x.t("additional","error");
x.t("(mapentryactions.add)","assuming");
x.t("send","pageview");
x.t("already","populated");
x.t("specific","encode");
x.t("(arguments)","[r]");
x.t("condition","switch");
x.t("fieldlist.applyhasstandarddata","retcode");
x.t("view","11.3");
x.t("11.3","container");
x.t("m=s.getelementsbytagname","(o)");
x.t("[0]","a.async=1");
x.t("(3)","begin");
x.t("(3)","entrykeyuint");
x.t("encountered","map.encodeinit");
x.t("codecfactory.createuint","encode");
x.t("11.3.3","map");
x.t("script","//www.google-analytics.com/analytics.js");
x.t(".push","(arguments)");
x.t("ua-55718642-4","auto");
x.t("data","init");
x.t("data","key");
x.t("data","field");
x.t("data","total");
x.t("data","pre-encoded");
x.t("data","first");
x.t("data","length");
x.t("data","properly");
x.t("data","retcode");
x.t("data","package");
x.t("data","approx");
x.t("information","store");
x.t("error.errorid","error.syserror");
x.t("nested","container");
x.t("assuming","encfieldlist");
x.t("assuming","encuint");
x.t("(mapentryactions.delete)","entrykeyuint.value");
x.t("mapentry","need");
x.t("mapentry","appropriately");
x.t("mapentry","fieldlist");
x.t("mapentry","values");
x.t("mapentry","itself");
x.t("mapentry","encoding");
x.t("values","example");
x.t("values","summary");
x.t("values","indicate");
x.t("values","mapentry");
x.t("successful","create");
x.t("reuse","entry");
x.t("structure","prior");
x.t("maps","keyprimitivetype");
x.t("print","message");
x.t("s\\n","error.errorid");
x.t("date","a=s.createelement");
x.t("//www.google-analytics.com/analytics.js","create");
x.t("note","key");
x.t("errno","encountered");
x.t("done","map.encodeinit");
x.t("non","pre-encoded");
x.t("(mapentryactions.update)","entrykeyuint.value");
x.t("itself","retcode");
x.t("edition","mapentry");
x.t("call","map.encodeinit");
x.t("enciterator","map");
x.t("encdata","enckey");
x.t("package","detailed");
x.t(".q=i","[r]");
x.t("following","sample");
x.t("used","example");
x.t("(datatypes.field_list)","map.keyprimitivetype");
x.t("contained","field");
x.t("[r]",".l=1");
x.t("[r]","function");
x.t("[r]",".push");
x.t("[r]",".q=i");
x.t("[r]","[r]");
x.t("containing","fieldlist");
x.t("containing","encoded");
x.t("(datatypes.uint)","populate");
x.t("approx","encoded");
x.t("approx","100");
x.t("using","specific");
x.t("using","enciterator");
x.t("finalize","encoding");
x.t("a.async=1","a.src=g");
x.t("entrykeyuint","parameter");
x.t("entrykeyuint","complete");
x.t("entrykeyuint","codecfactory.createuint");
x.t("entrykeyuint","encode");
x.t("(encuint)","assuming");
x.t("googleanalyticsobject","[r]");
x.t("performed","populate");
x.t("names","used");
x.t("success","parameter");
x.t("success","complete");
x.t("success","false");
x.t("success","second");
x.t("success","first");
x.t("success","retcode");
x.t("success","code");
x.t("success","failure");
x.t("success","value");
x.t("encode","method");
x.t("encode","entry");
x.t("encode","methods");
x.t("encode","expected");
x.t("encode","nested");
x.t("encode","contained");
x.t("buffer","version");
x.t("buffer","containing");
x.t("buffer","contains");
x.t("mapinit","encoding");
x.t("entries","example");
x.t("encoding","example");
x.t("encoding","summary");
x.t("encoding","field");
x.t("encoding","prior");
x.t("encoding","map");
x.t("encoding","failed");
x.t("encoding","retcode");
x.t("encoding","successful");
x.t("encoding","success");
x.t("a.src=g","m.parentnode.insertbefore");
x.t("update","action");
x.t("contains","pre-encoded");
x.t("map.encodecomplete","enciter");
}
